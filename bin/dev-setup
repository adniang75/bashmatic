#!/usr/bin/env bash
# vim: ft=bash
source "${HOME}/.bashmatic/init.sh" 1>/dev/null

run.set-all continue-on-error

export opt_terse=
export ruby_version=
export DevSetup__Version="0.1.0"

.dev-setup.pg-versions() {
  brew search postgresql@ | tr -d 'a-z@A-Z =>-' | sed '/^$/d' | sort -nr
}

.dev-setup.detect.pg-version() {
  declare -a pg_versions=($(brew.package.available-versions postgresql))
  export pg_versions
  export latest_postgres_version=${pg_versions[0]}
  export postgres_version=${postgres_version:-${latest_postgres_version}}
}

.dev-setup.detect.mysql-version() {
  declare -a mysql_versions=($(brew.package.available-versions mysql))
  export mysql_versions
  export latest_mysql_version="${mysql_versions[0]}"
  export mysql_version=${mysql_version:-${latest_mysql_version}}
}

.dev-setup.detect.ruby-version() {
  [[ -n ${ruby_version} ]] && return 0
  [[ -f .ruby-version ]] && {
    export ruby_version="$(cat .ruby-version | tr -d '\n')"
  }
}

.dev-setup.ruby() {
  if [[ -n ${ruby_version} ]]; then
    h1 "Installing Ruby ${ruby_version}"
    ruby.install "${ruby_version}"
    ruby.init
  else
    warning "No Ruby Version was provided."
  fi
}

declare -a DevSetup__Errors=()
declare -a DevSetup__BrewPackages=()
declare -a DevSetup__BrewCasks=()
declare -a DevSetup__BrewServices=()
declare -a DevSetup__Callbacks=()

export DevSetup__BrewPackages
export DevSetup__BrewCasks
export DevSetup__BrewServices
export DevSetup__Callbacks

.dev-setup.brew.dev() {
  # List of Brew Formulas to install and l`ink
  export DevSetup__BrewPackages=("${DevSetup__BrewPackages[@]}"
    ack
    asciidoc
    asciidoctor
    awscli
    bash
    bash-completion
    bats
    cloc
    coreutils
    curl
    direnv
    git
    geoip
    htop
    libevent
    imagemagick@6
    jpeg
    jq
    lame
    libffi
    libgcrypt
    libgpg-error
    libheif
    libiconv
    libidn2
    libksba
    libmemcached
    libmpc
    libomp
    libpng
    libtasn1
    libtiff
    libtool
    libunistring
    libusb
    libxml2
    libxslt
    libyaml
    libzip
    mysql-client
    ncurses
    netcat
    openssl@1.1
    p7zip
    pandoc
    pcre
    pstree
    readline
    rsync
    shellcheck
    the_silver_searcher
    tree
    vim
    watch
    wget
    ydiff
    zlib
  )

  export DevSetup__BrewCasks=("${DevSetup__BrewCasks[@]}"
    chromedriver
    rowanj-gitx
  )
}

.dev-setup.brew.gnu() {
  # List of Brew Formulas to install and l`ink
  export DevSetup__BrewPackages=("${DevSetup__BrewPackages[@]}"
    gnupg
    gnutls
    gnu-sed
    gnu-tar
    gnu-time
    gnu-which
  )
}

.dev-setup.brew.cpp() {
  export DevSetup__BrewPackages=("${DevSetup__BrewPackages[@]}"
    autoconf
    automake
    cmake
    gcc
    gdbm
    make
    pkg-config
  )
}

.dev-setup.brew.js() {
  export DevSetup__BrewPackages=("${DevSetup__BrewPackages[@]}"
    node
    yarn
  )
  export DevSetup__BrewCasks=("${DevSetup__BrewCasks[@]}"
    phantomjs
  )
  export DevSetup__Callbacks=(${DevSetup__Callbacks[@]}
    "[[ -f package.json ]] && npm install"
  )
}

.dev-setup.brew.python() {
  # List of Brew Formulas to install and l`ink
  export DevSetup__BrewPackages=("${DevSetup__BrewPackages[@]}"
    python
  )
}

.dev-setup.brew.ruby() {
  .dev-setup.detect.ruby-version
  [[ -z ${ruby_version} ]] && {
    error "Ruby Version must be provided."
    exit 1
  }
  # List of Brew Formulas to install and l`ink
  export DevSetup__BrewPackages=("${DevSetup__BrewPackages[@]}"
    rbenv
    ruby-build
    ruby-completion
  )

  export DevSetup__Callbacks=(${DevSetup__Callbacks[@]}
    "ruby.install ${ruby_version}"
    "rbenv global ${ruby_version}"
    "ruby.init"
    "ruby.bundle-install"
  )
}

.dev-setup.brew.java() {
  export DevSetup__BrewPackages=("${DevSetup__BrewPackages[@]}"
    openjdk@11
    maven
    maven-completion
    maven-shell
    ant
    ant-contrib
  )
}

.dev-setup.brew.go() {
  export DevSetup__BrewPackages=("${DevSetup__BrewPackages[@]}"
    golang
  )
}

.dev-setup.brew.bazel() {
  export DevSetup__BrewPackages=("${DevSetup__BrewPackages[@]}"
    openjdk@11
    buildifier
    bazelisk
    python
  )
}

.dev-setup.brew.monitoring() {
  export DevSetup__BrewPackages=("${DevSetup__BrewPackages[@]}"
    htop
    glances
    nmap
  )
}

.dev-setup.brew.load-balancing() {
  export DevSetup__BrewPackages=("${DevSetup__BrewPackages[@]}"
    haproxy
    nginx
  )
  export DevSetup__BrewServices=("${DevSetup__BrewServices[@]}"
    haproxy
    nginx
  )
}

.dev-setup.brew.caching() {
  export DevSetup__BrewPackages=("${DevSetup__BrewPackages[@]}"
    memcached
    redis
  )
  export DevSetup__BrewServices=("${DevSetup__BrewServices[@]}"
    memcached
    redis
  )
}

.dev-setup.brew.databases() {
  export DevSetup__BrewPackages=("${DevSetup__BrewPackages[@]}"
    "mysql@${mysql_version}"
    "postgresql@${postgres_version}"
  )
  export DevSetup__BrewServices=("${DevSetup__BrewServices[@]}"
    "mysql@${mysql_version}"
    "postgresql@${postgres_version}"
  )
}

declare -a components=($(util.functions-matching.diff ".dev-setup.brew."))
declare -a components_to_install=()

usage() {
  if [[ -f ${BASHMATIC_HOME}/bin/.dev-setup ]]; then
    cat ${BASHMATIC_HOME}/bin/.dev-setup
    return 0
  fi

  usage-box "dev-setup [ flags ] Â© Installs various packages via Homebrew." \
    "-a / --all" "Installs everything" \
    "-e / --exit-on-error" "Abort if an error occurs. Default is to keep going." \
    "-g / --groups" "Installs dev + specific groups of packages and casks." \
    "-d / --no-dev" "Skips dev when used with a specific -g selection." \
    "-q / --quieter" "Do not print as much output." \
    "-n / --dry-run" "Only print commands, but do not run them" \
    "-r / --ruby-version VERSION" "Ruby version, overrides defaulkt ${ruby_version}" \
    "-p / --pg-version VERSION" "PostgreSQL version, overrides ${pg_version}" \
    "-m / --mysql-version VERSION" "MySQL version, overrides ${mysql_version}" \
    " " "Note that ${bldblu}dev${bldylw} group is always installed." \
    " " " " \
    " " "${bldblu}$(array.to.csv ${components[@]:0:5})" \
    " " "${bldblu}$(array.to.csv ${components[@]:5:5})" \
    " " "${bldblu}$(array.to.csv ${components[@]:10:5})"

  output.print-at-x-y 2 4 "$(usage-box.section "GROUPS")"
  exit 0
}

dev-setup.parse-opts() {
  [[ -z "$1" ]] && {
    usage
    exit 0
  }

  local -a default_components=(dev)
  export default_components

  # Parse additional flags
  while :; do
    case $1 in
    -g | --groups)
      shift
      for c in "${1}"; do
        export components_to_install=(${components_to_install[@]} "$c")
      done
      shift
      ;;
    -d | --no-dev)
      shift
      export default_components=()
      ;;
    -a | --all)
      shift
      export components_to_install=(${components[@]})
      ;;
    -r | --ruby-version)
      shift
      export ruby_version="$1"
      shift
      ;;
    -p | --pg-version)
      shift
      export postgres_version="$1"
      array.includes "${postgres_version}" "${pg_versions[@]}" || {
        error "PostgreSQL version ${postgres_version} can not be installed via Brew." \
          "Supported versions are $(array.to.csv "${pg_versions[@]}")"
        exit 2
      }
      shift
      ;;
    -m | --mysql-version)
      shift
      export mysql_version="$1"
      array.includes "${mysql_version}" "${mysql_versions[@]}" || {
        error "MySQL version ${mysql_version} can not be installed via Brew." \
          "Supported versions are $(array.to.csv "${mysql_versions[@]}")"
        exit 2
      }
      shift
      ;;
    -n | --dry-run)
      run::set-all dry-run-on
      shift
      ;;
    -e | --exit-on-error)
      run::set-all abort-on-error
      shift
      ;;
    -q | --quieter)
      export opt_terse=true
      shift
      ;;
    -h | -\? | --help)
      shift
      usage
      exit 0
      ;;
    --) # End of all options; anything after will be passed to the action function
      shift
      break
      ;;
    -?*)
      printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
      exit 127
      shift
      ;;
    *)
      [[ -z "$1" ]] && break
      shift
      ;;
    esac
  done

  [[ ${#default_components[@]} -gt 0 ]] && {
    export components_to_install=(${default_components[@]} ${components_to_install[@]})
  }
}

dev-setup.init() {
  brew.install
}

dev-setup.install.packages() {
  local command="$1"
  shift
  local errors=0

  for package in "${@}"; do
    eval "${command} ${package}"
    local code=$?

    [[ ${code} -ne 0 ]] && {
      errors=$((errors + 1))
      DevSetup__Errors=(${DevSetup__Errors[@]} "${command} ${package}")
    }
  done
  echo
  return ${errors}
}

dev-setup.install() {
  local failures=0

  brew.cache-reset

  [[ "${#DevSetup__BrewPackages[@]}" -gt 0 ]] && {
    h2 "Installing Brew Packages"
    dev-setup.install.packages "brew.install.package" "${DevSetup__BrewPackages[@]}" || {
      failures=$((failures + 1))
    }
  }

  [[ "${#DevSetup__BrewCasks[@]}" -gt 0 ]] && {
    h2 "Installing Brew Casks"
    dev-setup.install.packages "brew.install.cask" "${DevSetup__BrewCasks[@]}" || {
      failures=$((failures + 1))
    }
  }

  [[ "${#DevSetup__BrewServices[@]}" -gt 0 ]] && {
    h2 "Starting Brew Services"
    dev-setup.install.packages "brew.service.up" "${DevSetup__BrewServices[@]}" || {
      failures=$((failures + 1))
    }
  }

  [[ "${#DevSetup__Callbacks[@]}" -gt 0 ]] && {
    h2 "Executing Callbacks"
    for command in "${DevSetup__Callbacks[@]}"; do
      if util.is-a-function "${command/ */}"; then
        eval "${command}" || {
          failures=$((failures + 1))
        }
      else
        run "${command}"
        [[ ${LibRun__LastExitCode} -eq 0 ]] || {
          failures=$((failures + 1))
        }
      fi
    done
  }

  if [[ ${failures} -eq 0 ]]; then
    success "Setup has completed with no failures."
  else
    echo
    warning \
      "Setup completed, but with some failures." "Total of ${failures} were detected and skipped."
    echo
    h.e "ATTENTION: the following commands failed:" "${DevSetup__Errors[@]}"
  fi
}

dev-setup.parse-opts "$@"
box.magenta-in-blue "Bashmatic Mac-OSX DevSetup Installer" "Version ${DevSetup__Version}"

[[ -z ${components_to_install[*]} ]] && export components_to_install=(${components[@]})

for c in "${components_to_install[@]}"; do
  func=".dev-setup.brew.${c}"
  eval "${func}"
done

dev-setup.install
