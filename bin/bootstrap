#!/usr/bin/env bash
# vim: ft=bash
set -e

# Configuration 
export BashVersion="5.1-rc2"
export SudoersDir="/private/etc/sudoers.d"

export HOME=${HOME:-"/"}
export BASHMATIC_HOME="${HOME}/.bashmatic"
export BASHMATIC_INIT="${HOME}/.bashmatic/init.sh"

if [[ ${USER} == "kig" ]]; then
  export BASHMATIC_URL="git@github.com:kigster/bashmatic"
else
  export BASHMATIC_URL="https://github.com/kigster/bashmatic"
fi

# Constants
export clr='\e[0m'       # Text Reset
export bldblk='\e[1;30m' # Black - Bold
export bldred='\e[1;31m' # Red
export bldgrn='\e[1;32m' # Green
export bldylw='\e[1;33m' # Yellow
export bldblu='\e[1;34m' # Blue
export bldpur='\e[1;35m' # Purple
export bldcyn='\e[1;36m' # Cyan
export bldwht='\e[1;37m' # White

ts() {
  date '+%Y/%m/%d %I:%M:%S%p'
}

puts() {
  printf "${bldblu}INFO  | ${bldcyn}$(ts) | ${clr}${*}${clr}\n"
}

err() {
  printf "${bldred}————————————————————————————————————————————————————————————${clr}\n"
  for str in "$@"; do
    printf "${bldred}ERROR | ${bldcyn}$(ts) | ${bldred}$str\n"
  done
}


sudo-ask() {
  echo "Please enter your SUDO password if asked:"
  sudo echo
}

sudo-enable() {
  sudo mkdir -p ${SudoersDir}
  [[ -s ${SudoersDir}/${USER} ]] || {
    echo ${USER} 'ALL=(ALL) NOPASSWD: ALL' | \
      sudo tee -a ${SudoersDir}/${USER}
  }
}

sudo-disable() {
  sudo rm -f "${SudoersDir}/${USER}"
}


bash-install() {
  local version="${1:-${BashVersion}}"
  echo "Instaling BASH version ${version}, please wait..."
  bash-compile "${version}" >/dev/null
}

bash-compile() {
  local version="$1"
  local BashTar="bash-${version}.tar.gz"
  local BashURL="http://ftp.gnu.org/gnu/bash/${BashTar}"
  local pwd="${PWD}"
  set -e
  local temp=/tmp/bash-sources
  mkdir -p ${temp}
  trap "cd ${pwd}" EXIT
  cd ${temp}
  curl -O "${BashURL}"
  tar xvzf "${BashTar}"
  cd bash-${version}
  ./configure --prefix=/usr/local
  make -j 12
  sudo make install
  [[ -x /usr/local/bin/bash ]] && {
    export PATH="/usr/local/bin:${PATH}"
    echo /usr/local/bin/bash | sudo tee -a /private/etc/shells
  }
}

brew-install() {
  echo "Installing Homebrew, please wait..."
  /usr/bin/ruby -e \
       "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
}

brew-uninstall() {
  echo y | /usr/bin/env bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh)"
}


git-sync() {
  cd "${BASHMATIC_HOME}" >/dev/null
  [[ -d ".git" ]] || return

  if [[ -n $(git status -s) ]]; then
    err "Looks like your .bashmatic folder exists, and has some locally modified files." \
      "Please commit, stash or remove those files, and re-run this setup." \
      "Folder: ${bldpur}${BASHMATIC_HOME}, ${bldylw}git status:"
    echo
    git status -s -u
    echo
    exit 1
  fi

  (git checkout master && git pull --rebase) >/dev/null

  cd - >/dev/null
}

os-init() {
  OS="$(uname -s)"
  if [[ "${OS}" == "Darwin" ]]; then
    osx-reqs
  elif [[ "${OS}" == "Linux" ]]; then
    puts "Please install Git."
    puts "eg. apt-get install git"
    exit 1
  fi
}

osx-reqs() {
    puts "Verifying and installing XCode Dependencies..."

    local xcode_app="/Applications/Xcode.app"
    local xcode_tools="${xcode_app}/Contents/Developer"
    local cli_tools="/Library/Developer/CommandLineTools"

    if [[ -d "${xcode_app}" && -d "${xcode_tools}" ]]; then
      [[ $(xcode-select -p) == "${xcode_tools}" ]] || sudo xcode-select --switch "${xcode_tools}"
    else
      command -v xcodebuild >/dev/null || xcode-select --install 2>&1
      [[ -d "${cli_tools}" && $(xcode-select -p) == "${cli_tools}" ]] || sudo xcode-select --switch ${cli_tools} 2>/dev/null
    fi

    bash -c 'command -v xcodebuild >/dev/null && sudo xcodebuild -license accept 2>&1 1>/dev/null; true ' > /dev/null
    echo
}

is-debug() {
 ((bootstrap__debug))
}

export bootstrap__debug=0
export bootstrap__verbose=0

usage() {
  printf "
${bldylw}USAGE: 
  ${bldgrn}bin/bootstrap [ flags ]

${bldylw}DESCRIPTION:
  ${bldblu}Install Bashmatic, and on OSX also installs build tools, brew and latest bash
  into /usr/local/bin/bash

${bldylw}FLAGS:${bldpur}
  -v, --verbose           See additional output
  -d, --debug             Turn on 'set -x' to see all commands running
  -h, --help              Show this help message.
  ${clr}
  "
}


parse-opts() {
  # Parse additional flags
  while :; do
    case $1 in
    -d | --debug)
      shift
      export bootstrap__debug=1
      set -x
      ;;
    -v | --verbose)
      shift
      export bootstrap__verbose=1
      ;;
    -h | -\? | --help)
      shift
      usage
      exit 0
      ;;
    --) # End of all options; anything after will be passed to the action function
      shift
      break
      ;;
    -?*)
      printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
      exit 127
      shift
      ;;
    *)
      [[ -z "$1" ]] && break
      shift
      ;;
    esac
  done
}

main() {
  parse-opts "$@"
  sudo-ask
  sudo-enable
  os-init

  [[ $BASH_VERSION =~ ^3 ]] && bash-install 
  command -v brew >/dev/null || brew-install
  command -v gdate >/dev/null || brew install coreutils >/dev/null

  if [[ -d ${BASHMATIC_HOME} && -f ${BASHMATIC_HOME}/init.sh ]]; then
    git-sync
  else
    git clone ${BASHMATIC_URL} ${BASHMATIC_HOME} >/dev/null
  fi

  if [[ -s "${BASHMATIC_INIT}" ]]; then
    # shellcheck disable=SC1090
    source "${BASHMATIC_INIT}"
    bashmatic.load-at-login
    success "Your BashMatic has been successfully installed."
    exit 0
  else
    err "Bashmatic did not install correctly, please run the following command by hand:"
    err "${bldgrn}git clone ${BASHMATIC_URL} ${BASHMATIC_HOME}"
    exit 1
  fi
}

main "$@"


